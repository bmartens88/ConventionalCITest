name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build-test-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Install GitVersion tool
      - name: Install GitVersion
        run: dotnet tool install --global GitVersion.Tool
      
      # Determines version based of conventional commits
      - name: Determine version
        id: gitversion
        run: |
          gitversion=$(dotnet-gitversion /output json)
          echo "version=$(echo $gitversion | jq -r '.SemVer')" >> $GITHUB_OUTPUT
          echo "nuget_version=$(echo $gitversion | jq -r '.NuGetVersion')" >> $GITHUB_OUTPUT

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build application code
      - name: Build
        run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.version }}

      # Test application code
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

      # Build NuGet package
      - name: Package
        run: dotnet pack --configuration Release --no-build -p:Version=${{ steps.gitversion.outputs.version }} -o artifacts

      # # Create tag for determined version
      # - name: Tag
      #   uses: rickstaa/action-create-tag@v1.7.2
      #   with:
      #     tag: 'v${{ steps.gitversion.outputs.version }}'
      #     message: 'Release v${{ steps.gitversion.outputs.version }}'

      # Create a new release
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion.outputs.version }}
          release_name: Release v${{ steps.gitversion.outputs.version }}
          body: |
            Automated release for version v${{ steps.gitversion.outputs.version }}
            Generated using conventional commits
          draft: false
          prerelease: false

      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./artifacts/*.nupkg
          asset_content_type: application/octet-stream
